# <http://docs.travis-ci.com/user/languages/haskell/>
# <https://github.com/ZeusWPI/12Urenloop/blob/master/.travis.yml>
# <http://docs.travis-ci.com/user/build-configuration/>
# The only versions natively supported by TravisCI are (7.0, 7.4,
# 7.6, 7.8). Other versions (6.8, 6.10, 6.12; 7.2; 7.10) are not
# supported, and patchlevels cannot be secified.
# <http://docs.travis-ci.com/user/ci-environment/#Haskell-VM-images>
#
# So instead, we use <https://github.com/hvr/multi-ghc-travis>
# However, note that these are only for Ubuntu Linux 12.04 LTS
# 64-bit. Will have to come up with something fancy in order to
# also use the native versions for testing Windows and OSX.
language: haskell
env:
 - CABALVER=1.16 GHCVER=6.12.3
 - CABALVER=1.16 GHCVER=7.0.1
 - CABALVER=1.16 GHCVER=7.0.2
 - CABALVER=1.16 GHCVER=7.0.3
 - CABALVER=1.16 GHCVER=7.0.4
 - CABALVER=1.16 GHCVER=7.2.1
 - CABALVER=1.16 GHCVER=7.2.2
 - CABALVER=1.16 GHCVER=7.4.1
 - CABALVER=1.16 GHCVER=7.4.2
 - CABALVER=1.16 GHCVER=7.6.1
 - CABALVER=1.16 GHCVER=7.6.2
 - CABALVER=1.18 GHCVER=7.6.3
 - CABALVER=1.18 GHCVER=7.8.1
 - CABALVER=1.18 GHCVER=7.8.2
 - CABALVER=1.18 GHCVER=7.8.3
 - CABALVER=1.18 GHCVER=7.8.4
 - CABALVER=1.22 GHCVER=7.10.1
 - CABALVER=1.22 GHCVER=7.10.2 # (pre-release snapshot)


# Rather than using the version suggested by hvr/multi-ghc-travis,
# we use the version from lens
# <https://github.com/ekmett/lens/blob/master/.travis.yml>
before_install:
  # If $GHCVER is the one travis has, don't bother reinstalling it.
  # We can also have faster builds by installing some libraries with
  # `apt`. If it isn't, install the GHC we want from hvr's PPA along
  # with cabal-1.18.
  - |
    if [ $GHCVER = `ghc --numeric-version` ]; then
      # Try installing some of the build-deps with apt-get for speed.
      travis/cabal-apt-install --enable-tests $MODE
      export CABAL=cabal
    else
      # Install the GHC we want from hvr's PPA
      travis_retry sudo add-apt-repository -y ppa:hvr/ghc
      travis_retry sudo apt-get update
      travis_retry sudo apt-get install cabal-install-$CABALVER ghc-$GHCVER
      export CABAL=cabal-$CABALVER
      export PATH=/opt/ghc/$GHCVER/bin:/opt/cabal/$CABALVER/bin:$PATH
    fi
  # Uncomment whenever hackage is down.
  #- mkdir -p ~/.cabal && cp travis/config ~/.cabal/config && $CABAL update
  #
  # BUG: cabal-1.16 doesn't seem to like the `update` line. We get
  # this obscure error: ""cabal-1.16: Command.optionToFieldDescr:
  # feature not implemented"" I think maybe that's because cabal-install
  # didn't work then? Or, it's because the cabal config has a line
  # specifying "jobs: 2" which causes the glitch...
  # cf., <https://ghc.haskell.org/trac/ghc/ticket/7324> among others
  - grep jobs .cabal/config
  # We don't actually have dependencies other than the boot libraries, so we'll comment it out for now...
  #- $CABAL update

install:
 - $CABAL --version
 - echo "$(ghc --version) [$(ghc --print-project-git-commit-id 2> /dev/null || echo '?')]"
 # We don't actually have dependencies other than the boot libraries, so we'll comment these two lines out for now...
 #- travis_retry $CABAL update
 # TODO: make the --enable-tests --enable-benchmarks flags work
 #- $CABAL install --only-dependencies
 # TODO: make the --enable-tests --enable-benchmarks flags work
 - $CABAL configure -v2


# Here starts the actual work to be performed for the package under
# test; any command which exits with a non-zero exit code causes
# the build to fail.
script:
  - $CABAL build
  # TODO: add the test suite
  #- $CABAL test --show-details=always
  - $CABAL check
  # tests that a source-distribution can be generated
  - $CABAL sdist
  # check that the generated source-distribution can be built & installed
  - export SRC_TGZ=$(cabal info . | awk '{print $2 ".tar.gz";exit}') ;
    cd dist/;
    if [ -f "$SRC_TGZ" ]; then
       cabal install --force-reinstalls "$SRC_TGZ";
    else
       echo "expected '$SRC_TGZ' not found";
       exit 1;
    fi

# TODO: additional checks:
# * Check for code-smell via hlint
# * Check for build-depends excluding latest package versions with packdeps
# * Check for unused build-depends with packunused
# * Check for 100% Haddock coverage
# * Check for trailing whitespaces and/or tabs in source files
